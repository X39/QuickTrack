// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickTrack.Data.EntityFramework;

#nullable disable

namespace QuickTrack.Data.EntityFramework.Migrations
{
    [DbContext(typeof(QtContext))]
    [Migration("20220907123856_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("DayLocation", b =>
                {
                    b.Property<int>("DaysId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DaysId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("DayLocation");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Json")
                        .HasColumnType("TEXT");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DayFk");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.JsonAttachment<QuickTrack.Data.Database.Day>", b =>
                {
                    b.Property<string>("Realm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Realm");

                    b.HasIndex("ParentId");

                    b.ToTable("JsonAttachment<Day>");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.JsonAttachment<QuickTrack.Data.Database.Location>", b =>
                {
                    b.Property<string>("Realm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Realm");

                    b.HasIndex("ParentId");

                    b.ToTable("JsonAttachment<Location>");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.JsonAttachment<QuickTrack.Data.Database.Project>", b =>
                {
                    b.Property<string>("Realm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Realm");

                    b.HasIndex("ParentId");

                    b.ToTable("JsonAttachment<Project>");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.JsonAttachment<QuickTrack.Data.Database.TimeLog>", b =>
                {
                    b.Property<string>("Realm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Realm");

                    b.HasIndex("ParentId");

                    b.ToTable("JsonAttachment<TimeLog>");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStampCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStampCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.TimeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayFk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Mode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectFk")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DayFk");

                    b.HasIndex("LocationFk");

                    b.HasIndex("Message");

                    b.HasIndex("ProjectFk");

                    b.HasIndex("TimeStamp");

                    b.ToTable("TimeLogs");
                });

            modelBuilder.Entity("DayLocation", b =>
                {
                    b.HasOne("QuickTrack.Data.Database.Day", null)
                        .WithMany()
                        .HasForeignKey("DaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickTrack.Data.Database.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuickTrack.Data.Database.Audit", b =>
                {
                    b.HasOne("QuickTrack.Data.Database.Day", "Day")
                        .WithMany("AuditLog")
                        .HasForeignKey("DayFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.Day", b =>
                {
                    b.OwnsOne("QuickTrack.Data.Database.DateComplex", "Date", b1 =>
                        {
                            b1.Property<int>("DayId")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Day")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Month")
                                .HasColumnType("INTEGER");

                            b1.Property<short>("Year")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DayId");

                            b1.HasIndex("Year");

                            b1.HasIndex("Month", "Year");

                            b1.HasIndex("Day", "Month", "Year")
                                .IsUnique();

                            b1.ToTable("Days");

                            b1.WithOwner()
                                .HasForeignKey("DayId");
                        });

                    b.Navigation("Date")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickTrack.Data.Database.JsonAttachment<QuickTrack.Data.Database.Day>", b =>
                {
                    b.HasOne("QuickTrack.Data.Database.Day", "Parent")
                        .WithMany("JsonAttachments")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.JsonAttachment<QuickTrack.Data.Database.Location>", b =>
                {
                    b.HasOne("QuickTrack.Data.Database.Location", "Parent")
                        .WithMany("JsonAttachments")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.JsonAttachment<QuickTrack.Data.Database.Project>", b =>
                {
                    b.HasOne("QuickTrack.Data.Database.Project", "Parent")
                        .WithMany("JsonAttachments")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.JsonAttachment<QuickTrack.Data.Database.TimeLog>", b =>
                {
                    b.HasOne("QuickTrack.Data.Database.TimeLog", "Parent")
                        .WithMany("JsonAttachments")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.TimeLog", b =>
                {
                    b.HasOne("QuickTrack.Data.Database.Day", "Day")
                        .WithMany("TimeLogs")
                        .HasForeignKey("DayFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickTrack.Data.Database.Location", "Location")
                        .WithMany("TimeLogs")
                        .HasForeignKey("LocationFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickTrack.Data.Database.Project", "Project")
                        .WithMany("TimeLogs")
                        .HasForeignKey("ProjectFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Location");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.Day", b =>
                {
                    b.Navigation("AuditLog");

                    b.Navigation("JsonAttachments");

                    b.Navigation("TimeLogs");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.Location", b =>
                {
                    b.Navigation("JsonAttachments");

                    b.Navigation("TimeLogs");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.Project", b =>
                {
                    b.Navigation("JsonAttachments");

                    b.Navigation("TimeLogs");
                });

            modelBuilder.Entity("QuickTrack.Data.Database.TimeLog", b =>
                {
                    b.Navigation("JsonAttachments");
                });
#pragma warning restore 612, 618
        }
    }
}
